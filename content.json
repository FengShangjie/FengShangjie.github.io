{"meta":{"title":"_King's Notes","subtitle":null,"description":"万古长空，一朝风月。","author":"_king","url":"https://yydwb.club"},"pages":[],"posts":[{"title":"python3-re","slug":"python3-re","date":"2018-07-13T09:55:25.000Z","updated":"2018-07-15T09:05:11.789Z","comments":true,"path":"2018/07/13/python3-re/","link":"","permalink":"https://yydwb.club/2018/07/13/python3-re/","excerpt":"python3中正表达式中的用法笔记由于自己对正则表达式不是很熟悉，自己就重新学习了一下这个正则表达式。下面是我学习正则表达式的一些笔记，自己主要是用于备忘与查询","text":"python3中正表达式中的用法笔记由于自己对正则表达式不是很熟悉，自己就重新学习了一下这个正则表达式。下面是我学习正则表达式的一些笔记，自己主要是用于备忘与查询 1、元字符 序号 字符 说明 1 \\ 转义符，表示转义 2 . 表示任意一个字符 3 + 重复一次或者多次 4 * 重复零次或者多次 5 ? 重复零次或者一次 6 \\ 选择符号，表示“或关系”，例如A\\ B 表示匹配A或B 7 {} 定义量词 8 [] 定义字符类 9 () 定义分组 10 ^ 可以表示取反， 或者匹配一行的开始 11 $ 匹配一行的结束 12345678910111213141516171819import rep1 = r'\\w+@zhijieketang\\.com' #没有规定字符位置匹配字符p2 = r'^\\w+@zhijieketang\\.com$' #规定了必须要以.com结尾text = \"Tony's email is tony_guan588@zhijieketang.com.\"m = re.search(p1, text)#p1与text匹配#输出为&lt;_sre.SRE_Match object; span=(16, 45), match='tony_guan588@zhijieketang.com'&gt;print(m) m = re.search(p2, text) #p2与text匹配#输出为Noneprint(m)email = 'tony_guan588@zhijieketang.com'm = re.search(p2, email)#p2与email匹配#输出为&lt;_sre.SRE_Match object; span=(0, 29), match='tony_guan588@zhijieketang.com'&gt;print(m) 2、预定义字符类==这里包括一些长用的字符表现形式，我们在c语言中经常使用==字符 | 说明–|–. | 匹配任意一个字符\\\\ | 匹配反斜杠\\字符\\n | 匹配换行\\r | 匹配回车\\f | 匹配一个换页符\\t | 匹配一个水平制表符\\v | 匹配一个垂直制表符\\s | 匹配一个空格符，等价于[\\n\\r\\f\\t\\v]\\S | 匹配一个非空格符，等价于[^\\s]\\d | 匹配一个数字字符，等价于[0-9]\\D | 匹配一个非数字字符，等价于[^0-9]\\w | 匹配任何语言的单词字符(如：英文字母、亚洲文字)、数字和下划线(_)等字符。如果正则表达式编译标志设置为ASCII，则指匹配[a-z0-9A-Z]\\W | 相当于[6\\w] 3、字符类这里主要包含着如何定义一个字符类(与其他的字符类是不同的这里面主要使用 [] 来做定义类。) r&#39;[0123456789]&#39; 表示数字集 r&#39;[^0123456789]&#39; 表示非数字集 4、区间区间是用 - 表示的 数字字符类 [0123456789] 表示为 [0-9]区间主要是使用在如果使用字符类， 则串里面的内容比较长，如果使用区间表示比较简单小写字母字符类 [a-z] 大写字母字符类 [A-z] 还可以使用间隔 [0-25-7]表示0、1、2、5、6、7 5、量词 字符 说明 ？ 出现==一==次或==零==次 * 出现==多==次或==零==次 + 出现==一==次或==多==次 {n} 出现==零==或==n==次 {n,m} 至少出现==n==次，但不超过==m==次 {n,} 至少出现n次 {n, m}? 只匹配5个，惰性量词 6、分组自此之前学习量词只能重复显示一个字符， 如果想让一个字符串作为整体使用量词，可将这个字符串发放到一对小括号中。这就是分组。 123456789101112131415import rep = r'(121)&#123;2&#125;' #正则表达式，并且创建分组(121)并且重复2次m = re.search(p, '121121abcabc')print(m)print(m.group()) #返回匹配的字符串 打印121121print(m.group(1)) #返回自一个组的内容 打印121print(m.groups()) #返回所有组的内容 打印('121',)p = r'(121)&#123;2&#125;(abc)&#123;2&#125;'m = re.search(p, '121121abcabc')print(m.group()) #打印121121abcabcprint(m.group(1)) #打印121print(m.groups()) #打印('121', 'abc') 分组还可以通过分组名字来访问格式:p = r’(?P&lt;area_code&gt;\\d{3,4})-(?P&lt;num_code&gt;\\d{7,8})’ (？P匹配串)123456789101112131415161718192021222324252627282930import rep = r'(\\d&#123;3,4&#125;)-(\\d&#123;7,8&#125;)' #正则表达式，建立区号和电话号码m = re.search(p, '0792-87654321')print(m)print(m.group(1)) print(m.group(2)) print(m.groups())'''&lt;_sre.SRE_Match object; span=(0, 13), match='0792-87654321'&gt;079287654321('0792', '87654321')'''p = r'(?P&lt;area_code&gt;\\d&#123;3,4&#125;)-(?P&lt;num_code&gt;\\d&#123;7,8&#125;)' #区号命名为area_code,电话号码命名为num_codem = re.search(p, '0792-87654321')print(m.group(1)) #通过分组号访问print(m.group(2)) print(m.group(\"area_code\")) #通过定义的名字来访问 print(m.group(\"num_code\")) '''079287654321079287654321'''#通过名字与编号访问结果式一样的 通过反向引用分组能获取特定的标签123456789101112131415import rep = r'&lt;([\\w]+)&gt;.*&lt;/([\\w]+)&gt;' #这是正常分组m = re.search(p, '&lt;a&gt;aaa&lt;/a&gt;')print(m) #能但会匹配结果m = re.search(p, '&lt;a&gt;aaa&lt;/b&gt;')print(m) #能返回匹配结果p = r'&lt;([\\w]+)&gt;.*&lt;/\\1&gt;' #这是反向引用分组m = re.search(p, '&lt;a&gt;aaa&lt;/a&gt;')print(m) #能返回匹配结果m = re.search(p, '&lt;a&gt;aaa&lt;/b&gt;')print(m) #不能返回，直接返回None 在日常的时候我们，有时候想要返回某个文件的内容，返货全部的名称。但是使用普通的分组是不能使用的，这个时候我们需要使用非捕获分组12345678import re s = 'img1.jpg, img2.jpg, img3.bmp'p = r'\\w+(\\.jpg)' #正常分组m = re.findall(p, s) print(m) #输出['.jpg', '.jpg']p = r'\\w+(?:\\.jpg)' #采用非捕获分组m = re.findall(p, s) print(m) #输出['img1.jpg', 'img2.jpg']","categories":[],"tags":[]},{"title":"markdown学习笔记","slug":"markdown学习笔记","date":"2018-04-15T13:18:13.000Z","updated":"2018-07-14T15:59:54.221Z","comments":true,"path":"2018/04/15/markdown学习笔记/","link":"","permalink":"https://yydwb.club/2018/04/15/markdown学习笔记/","excerpt":"这里是我学习markdown的一些笔记用于自己忘记的时候复习，当然你也欢迎您对我意见。","text":"这里是我学习markdown的一些笔记用于自己忘记的时候复习，当然你也欢迎您对我意见。1# 一级标题 一级标题1## 二级标题 二级标题1### 三级标题 三级标题1#### 四级标题 四级标题1##### 五级标题 五级标题1###### 六级标题 六级标题1234这是一个段落，根据人脑的思维我们可以根据句号来判断是一句话。在markdown里面我们可以根据换行来判断他是一句话。但是markdown显示的时候把他显示成一段话。如果我们要表示两段话我们可以用两个换行。比如这样。 我不是孤单一个人。 这是一个段落，根据人脑的思维我们可以根据句号来判断是一句话。在markdown里面我们可以根据换行来判断他是一句话。但是markdown显示的时候把他显示成一段话。如果我们要表示两段话我们可以用两个换行。比如这样。我不是孤单一个人。 1**这里是加粗的文字。** 这里是加粗的文字。 1*这里表示斜体* 这里表示斜体 1~~这里是删除线~~ 这里是删除线 1==这里是加重== ==这里是加重== 1++这里是下划线++ ++这里是下划线++ 1`这里是底纹` 这里是底纹 1\\+++里是转移符++(本来这里表示的是带有下划线的文字) +++里是转移符++(本来这里表示的是带有下划线的文字 123```markdown这里是区块 ``` 123~~~markdown这里是区块 ~~~ 123456这里是区块 ~~~ ~~~markdown&gt; 这里表示引用&gt;&gt; 这里是子引用 这里表示引用 这里是子引用 123****这里是分隔线,用三个或以上 * 符号**** 这里是分隔线,用三个或以上 * 符号 123___这里也是分隔线，用三个或以上的 _ 符号___ 这里也是分隔线，用三个或以上的 _ 符号123---这里也是分隔线，用三个或以上的 - 符号--- 这里也是分隔线，用三个或以上的 - 符号1234561. 这里是有序列表的第一个元素2. 这里是有序列表的第二个元素，他的子列表是无序列表： - 这里是无序列表的第一个子元素 - 这里是无序列表的第二哥元素 - 这里是无序列表的第三个元素- 当然了，无序列表可以单独使用了 这里是有序列表的第一个元素 这里是有序列表的第二个元素，他的子列表是无序列表： 这里是无序列表的第一个子元素 这里是无序列表的第二哥个元素 这里是无序列表的第三个元素 当然了，无序列表可以单独使用了 1234你想选哪个：- [x] 选这个，因为里面有x。- [ ] 不选这个，因为这个中间是空的。- [ ] 我还能扩展 你想选哪个： 选这个，因为里面有x。 不选这个，疑问这个中间是空的。 我还能扩展 1234567[百度的超链接](https://www.baidu.com)[这篇博客的超链接](http://www.yydwb.club)![带有百度logo](https://www.baidu.com/img/bd_logo1.png)![再来一个有道云笔记的logo](http://note.youdao.com/images/index/dd55e32b.logo.png) 百度的超链接 这篇博客的超链接 12345这里是用脚注的方式来表示url,[百度][1], [腾讯][2], [我的博客][3][1]:htts://www.baidu.com[2]:http://www.qq.com[3]:http://www.yydwb.com 这里是用脚注的方式来表示url,百度, 腾讯, 我的博客 123456表格的第一列 | 表格的第二列 | 空列 --- | ------------- | ---- 中间有三个 - | 也可以是三个以上的 - |这里还可以少一个 | 少了之后在后面自动补全 | 要空第一个必须多一根 | | | 空前面两列是一样的 表格的第一列 表格的第二列 空列 中间有三个 - 也可以是三个以上的 - 这里还可以少一个 少了之后在后面自动补全 要空第一个必须多一根 空前面两列是一样的","categories":[],"tags":[]},{"title":"关于在windows下使用Hexo创建一篇新的博客","slug":"Hexo","date":"2018-04-15T04:18:01.000Z","updated":"2018-07-13T09:42:33.600Z","comments":true,"path":"2018/04/15/Hexo/","link":"","permalink":"https://yydwb.club/2018/04/15/Hexo/","excerpt":"欢迎来到我的第一篇博客，这是我的第一篇博客。下面是我学习如何用Hexok写博客的一些心得体会。可能我写的不够详细，请参考hexo官方文档。","text":"欢迎来到我的第一篇博客，这是我的第一篇博客。下面是我学习如何用Hexok写博客的一些心得体会。可能我写的不够详细，请参考hexo官方文档。 创建新的blog 在cmd中自己本地的blog目录下执行以下命令1$ hexo new [layout] &lt;title&gt;让我们开始看看这条命令吧。title是你的博客名称其中layout表示布局，默认表示post其实它是这样的表示的。1234Layout Path post source/_posts page source draft source/_drafts我们可以在命令行下都试一遍，这样自己会更好的理解。 使用草稿来写blog 前面我们讲过Layout，中有三个模式。其中有一个为draft模式。 我们采用命令1$ hexo publish [layout] &lt;title&gt;title必须是你的drafts文件夹中要有的文件名,换个角度来说就是你的博客的名称。&emsp;&emsp;当然这只是如何生成博客，具体的编写还是要自己在自己博客目录下source文件夹下的问价找出自己要编写的方式然后自己根据markdown语法规则来编写。","categories":[],"tags":[]}]}